
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006228  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006500  08006500  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006518  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006578  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005c0  240000d0  080065d8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000690  080065d8  00020690  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002329e  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000031d3  00000000  00000000  0004339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001480  00000000  00000000  00046570  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001358  00000000  00000000  000479f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038230  00000000  00000000  00048d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00010c07  00000000  00000000  00080f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001690cd  00000000  00000000  00091b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fac4c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005894  00000000  00000000  001facc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080064a8 	.word	0x080064a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080064a8 	.word	0x080064a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd5c 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f810 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f9be 	bl	8000964 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e8:	f000 f8c4 	bl	8000774 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f93c 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f986 	bl	8000900 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM16_Init();
 80005f4:	f000 f910 	bl	8000818 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim16);
 80005f8:	4801      	ldr	r0, [pc, #4]	; (8000600 <main+0x28>)
 80005fa:	f004 f9c1 	bl	8004980 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x26>
 8000600:	24000640 	.word	0x24000640

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0cc      	sub	sp, #304	; 0x130
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800060e:	224c      	movs	r2, #76	; 0x4c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 ff40 	bl	8006498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 ff39 	bl	8006498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	23bc      	movs	r3, #188	; 0xbc
 800062e:	461a      	mov	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f005 ff31 	bl	8006498 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000636:	2002      	movs	r0, #2
 8000638:	f001 fe6c 	bl	8002314 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <SystemClock_Config+0x164>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	4a48      	ldr	r2, [pc, #288]	; (8000768 <SystemClock_Config+0x164>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <SystemClock_Config+0x164>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f003 0201 	and.w	r2, r3, #1
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <SystemClock_Config+0x168>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a43      	ldr	r2, [pc, #268]	; (800076c <SystemClock_Config+0x168>)
 8000660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b41      	ldr	r3, [pc, #260]	; (800076c <SystemClock_Config+0x168>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000676:	bf00      	nop
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <SystemClock_Config+0x168>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000684:	d1f8      	bne.n	8000678 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800068c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a6:	2318      	movs	r3, #24
 80006a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006be:	230c      	movs	r3, #12
 80006c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fe67 	bl	80023a8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006e0:	f000 fa32 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	233f      	movs	r3, #63	; 0x3f
 80006e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fa54 	bl	8002bc8 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000726:	f000 fa0f 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <SystemClock_Config+0x16c>)
 8000730:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fdc0 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000756:	f000 f9f7 	bl	8000b48 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800075a:	f001 fe15 	bl	8002388 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800075e:	bf00      	nop
 8000760:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	58000400 	.word	0x58000400
 800076c:	58024800 	.word	0x58024800
 8000770:	00040002 	.word	0x00040002

08000774 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_ETH_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_ETH_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ETH_Init+0x90>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ETH_Init+0x90>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ETH_Init+0x90>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	3302      	adds	r3, #2
 8000796:	22e1      	movs	r2, #225	; 0xe1
 8000798:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ETH_Init+0x90>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	3303      	adds	r3, #3
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ETH_Init+0x90>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ETH_Init+0x90>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	3305      	adds	r3, #5
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ETH_Init+0x90>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ETH_Init+0x90>)
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_ETH_Init+0x98>)
 80007c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ETH_Init+0x90>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_ETH_Init+0x9c>)
 80007c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_ETH_Init+0x90>)
 80007cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_ETH_Init+0x90>)
 80007d4:	f000 fe44 	bl	8001460 <HAL_ETH_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f9b3 	bl	8000b48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <MX_ETH_Init+0xa0>)
 80007e8:	f005 fe56 	bl	8006498 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_ETH_Init+0xa0>)
 80007ee:	2221      	movs	r2, #33	; 0x21
 80007f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_ETH_Init+0xa0>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_ETH_Init+0xa0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2400059c 	.word	0x2400059c
 8000808:	40028000 	.word	0x40028000
 800080c:	24000070 	.word	0x24000070
 8000810:	24000010 	.word	0x24000010
 8000814:	2400060c 	.word	0x2400060c

08000818 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_TIM16_Init+0x48>)
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <MX_TIM16_Init+0x4c>)
 8000820:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_TIM16_Init+0x48>)
 8000824:	f242 527f 	movw	r2, #9599	; 0x257f
 8000828:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_TIM16_Init+0x48>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_TIM16_Init+0x48>)
 8000832:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000836:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_TIM16_Init+0x48>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_TIM16_Init+0x48>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_TIM16_Init+0x48>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_TIM16_Init+0x48>)
 800084c:	f004 f840 	bl	80048d0 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000856:	f000 f977 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000640 	.word	0x24000640
 8000864:	40014400 	.word	0x40014400

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <MX_USART3_UART_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008b2:	f004 fa9b 	bl	8004dec <HAL_UART_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 f944 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008c4:	f005 fa35 	bl	8005d32 <HAL_UARTEx_SetTxFifoThreshold>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f93b 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f005 fa6a 	bl	8005dae <HAL_UARTEx_SetRxFifoThreshold>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f932 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_USART3_UART_Init+0x90>)
 80008e6:	f005 f9eb 	bl	8005cc0 <HAL_UARTEx_DisableFifoMode>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f0:	f000 f92a 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	240000f0 	.word	0x240000f0
 80008fc:	40004800 	.word	0x40004800

08000900 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000908:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2209      	movs	r2, #9
 800090e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2202      	movs	r2, #2
 8000914:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2202      	movs	r2, #2
 8000920:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	2201      	movs	r2, #1
 8000926:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000936:	2201      	movs	r2, #1
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093c:	2201      	movs	r2, #1
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000948:	f001 fb9c 	bl	8002084 <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 f8f9 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2400017c 	.word	0x2400017c
 8000960:	40080000 	.word	0x40080000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <MX_GPIO_Init+0x188>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a5a      	ldr	r2, [pc, #360]	; (8000aec <MX_GPIO_Init+0x188>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b58      	ldr	r3, [pc, #352]	; (8000aec <MX_GPIO_Init+0x188>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000998:	4b54      	ldr	r3, [pc, #336]	; (8000aec <MX_GPIO_Init+0x188>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a53      	ldr	r2, [pc, #332]	; (8000aec <MX_GPIO_Init+0x188>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <MX_GPIO_Init+0x188>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <MX_GPIO_Init+0x188>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <MX_GPIO_Init+0x188>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <MX_GPIO_Init+0x188>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_GPIO_Init+0x188>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <MX_GPIO_Init+0x188>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b41      	ldr	r3, [pc, #260]	; (8000aec <MX_GPIO_Init+0x188>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <MX_GPIO_Init+0x188>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a3c      	ldr	r2, [pc, #240]	; (8000aec <MX_GPIO_Init+0x188>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <MX_GPIO_Init+0x188>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_GPIO_Init+0x188>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a35      	ldr	r2, [pc, #212]	; (8000aec <MX_GPIO_Init+0x188>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <MX_GPIO_Init+0x188>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a34:	482e      	ldr	r0, [pc, #184]	; (8000af0 <MX_GPIO_Init+0x18c>)
 8000a36:	f001 faf1 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	482d      	ldr	r0, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x190>)
 8000a40:	f001 faec 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ubtn_Pin */
  GPIO_InitStruct.Pin = ubtn_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ubtn_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4827      	ldr	r0, [pc, #156]	; (8000af8 <MX_GPIO_Init+0x194>)
 8000a5a:	f001 f917 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a5e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481e      	ldr	r0, [pc, #120]	; (8000af0 <MX_GPIO_Init+0x18c>)
 8000a78:	f001 f908 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <MX_GPIO_Init+0x190>)
 8000a94:	f001 f8fa 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <MX_GPIO_Init+0x190>)
 8000aac:	f001 f8ee 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <MX_GPIO_Init+0x18c>)
 8000ac6:	f001 f8e1 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : button2_Pin */
  GPIO_InitStruct.Pin = button2_Pin;
 8000aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button2_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_GPIO_Init+0x18c>)
 8000ae0:	f001 f8d4 	bl	8001c8c <HAL_GPIO_Init>

}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020400 	.word	0x58020400
 8000af4:	58021800 	.word	0x58021800
 8000af8:	58020800 	.word	0x58020800

08000afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{systime++;
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b0c:	6013      	str	r3, [r2, #0]
if(htim==(&htim16))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x38>
	{	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	480a      	ldr	r0, [pc, #40]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b1a:	f001 fa98 	bl	800204e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin));
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b24:	f001 fa62 	bl	8001fec <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b30:	f001 fa74 	bl	800201c <HAL_GPIO_WritePin>

	}

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000598 	.word	0x24000598
 8000b40:	24000640 	.word	0x24000640
 8000b44:	58020400 	.word	0x58020400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58024400 	.word	0x58024400

08000b8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a59      	ldr	r2, [pc, #356]	; (8000d10 <HAL_ETH_MspInit+0x184>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 80ab 	bne.w	8000d06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bb0:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb6:	4a57      	ldr	r2, [pc, #348]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc0:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bde:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf2:	4a48      	ldr	r2, [pc, #288]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c82:	2332      	movs	r3, #50	; 0x32
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <HAL_ETH_MspInit+0x18c>)
 8000c9e:	f000 fff5 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ca2:	2386      	movs	r3, #134	; 0x86
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <HAL_ETH_MspInit+0x190>)
 8000cbe:	f000 ffe5 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4810      	ldr	r0, [pc, #64]	; (8000d20 <HAL_ETH_MspInit+0x194>)
 8000ce0:	f000 ffd4 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ce4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf6:	230b      	movs	r3, #11
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <HAL_ETH_MspInit+0x198>)
 8000d02:	f000 ffc3 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40028000 	.word	0x40028000
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	58020400 	.word	0x58020400
 8000d24:	58021800 	.word	0x58021800

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_TIM_Base_MspInit+0x48>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d116      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2075      	movs	r0, #117	; 0x75
 8000d5e:	f000 fb4a 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d62:	2075      	movs	r0, #117	; 0x75
 8000d64:	f000 fb61 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40014400 	.word	0x40014400
 8000d74:	58024400 	.word	0x58024400

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12e      	bne.n	8000df8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de8:	2307      	movs	r3, #7
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0x90>)
 8000df4:	f000 ff4a 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004800 	.word	0x40004800
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020c00 	.word	0x58020c00

08000e0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_PCD_MspInit+0xa4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d13b      	bne.n	8000ea6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e5e:	230a      	movs	r3, #10
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e6a:	f000 ff0f 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <HAL_PCD_MspInit+0xac>)
 8000e84:	f000 ff02 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_PCD_MspInit+0xa8>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40080000 	.word	0x40080000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020000 	.word	0x58020000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f934 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM16_IRQHandler+0x10>)
 8000f1e:	f003 fd65 	bl	80049ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000640 	.word	0x24000640

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <SystemInit+0xec>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a38      	ldr	r2, [pc, #224]	; (8001018 <SystemInit+0xec>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <SystemInit+0xf0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d807      	bhi.n	8000f5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <SystemInit+0xf0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 030f 	bic.w	r3, r3, #15
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <SystemInit+0xf0>)
 8000f56:	f043 0307 	orr.w	r3, r3, #7
 8000f5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f5c:	4b30      	ldr	r3, [pc, #192]	; (8001020 <SystemInit+0xf4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <SystemInit+0xf4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <SystemInit+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <SystemInit+0xf4>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	492b      	ldr	r1, [pc, #172]	; (8001020 <SystemInit+0xf4>)
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <SystemInit+0xf8>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemInit+0xf0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d907      	bls.n	8000f96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemInit+0xf0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 030f 	bic.w	r3, r3, #15
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <SystemInit+0xf0>)
 8000f90:	f043 0307 	orr.w	r3, r3, #7
 8000f94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemInit+0xf4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <SystemInit+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemInit+0xf4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <SystemInit+0xf4>)
 8000faa:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <SystemInit+0xfc>)
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <SystemInit+0xf4>)
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <SystemInit+0x100>)
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <SystemInit+0xf4>)
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <SystemInit+0x104>)
 8000fb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <SystemInit+0xf4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <SystemInit+0xf4>)
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <SystemInit+0x104>)
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <SystemInit+0xf4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <SystemInit+0xf4>)
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <SystemInit+0x104>)
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <SystemInit+0xf4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SystemInit+0xf4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <SystemInit+0xf4>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <SystemInit+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <SystemInit+0x108>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <SystemInit+0x10c>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ff6:	d202      	bcs.n	8000ffe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <SystemInit+0x110>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <SystemInit+0x114>)
 8001000:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001004:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0xec>)
 8001008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	52002000 	.word	0x52002000
 8001020:	58024400 	.word	0x58024400
 8001024:	eaf6ed7f 	.word	0xeaf6ed7f
 8001028:	02020200 	.word	0x02020200
 800102c:	01ff0000 	.word	0x01ff0000
 8001030:	01010280 	.word	0x01010280
 8001034:	5c001000 	.word	0x5c001000
 8001038:	ffff0000 	.word	0xffff0000
 800103c:	51008108 	.word	0x51008108
 8001040:	52004000 	.word	0x52004000

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001048:	f7ff ff70 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800104c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800104e:	e003      	b.n	8001058 <LoopCopyDataInit>

08001050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001056:	3104      	adds	r1, #4

08001058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800105c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001060:	d3f6      	bcc.n	8001050 <CopyDataInit>
  ldr  r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001064:	e002      	b.n	800106c <LoopFillZerobss>

08001066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001068:	f842 3b04 	str.w	r3, [r2], #4

0800106c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001070:	d3f9      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f005 f9ed 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff faaf 	bl	80005d8 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001080:	08006508 	.word	0x08006508
  ldr  r0, =_sdata
 8001084:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001088:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800108c:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001090:	24000690 	.word	0x24000690

08001094 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC3_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 f99e 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010a4:	f001 ff46 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 80010a8:	4601      	mov	r1, r0
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_Init+0x68>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_Init+0x6c>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa21 f303 	lsr.w	r3, r1, r3
 80010c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_Init+0x68>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_Init+0x6c>)
 80010cc:	5cd3      	ldrb	r3, [r2, r3]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_Init+0x70>)
 80010da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_Init+0x74>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f814 	bl	8001110 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e002      	b.n	80010f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010f2:	f7ff fd31 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58024400 	.word	0x58024400
 8001104:	080064d0 	.word	0x080064d0
 8001108:	24000004 	.word	0x24000004
 800110c:	24000000 	.word	0x24000000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_InitTick+0x60>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e021      	b.n	8001168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_InitTick+0x64>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_InitTick+0x60>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f983 	bl	8001446 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f94d 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x68>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2400000c 	.word	0x2400000c
 8001174:	24000000 	.word	0x24000000
 8001178:	24000008 	.word	0x24000008

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2400000c 	.word	0x2400000c
 80011a0:	2400068c 	.word	0x2400068c

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2400068c 	.word	0x2400068c

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_Delay+0x40>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2400000c 	.word	0x2400000c

08001200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetREVID+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0c1b      	lsrs	r3, r3, #16
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	5c001000 	.word	0x5c001000

08001218 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	58000400 	.word	0x58000400

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <__NVIC_SetPriorityGrouping+0x40>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	4313      	orrs	r3, r2
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x40>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	05fa0000 	.word	0x05fa0000

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <__NVIC_EnableIRQ+0x38>)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff29 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff40 	bl	8001288 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff33 	bl	80012a4 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa4 	bl	800139c <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0c6      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fb86 	bl	8000b8c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2223      	movs	r2, #35	; 0x23
 8001484:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b60      	ldr	r3, [pc, #384]	; (8001608 <HAL_ETH_Init+0x1a8>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800148c:	4a5e      	ldr	r2, [pc, #376]	; (8001608 <HAL_ETH_Init+0x1a8>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001496:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_ETH_Init+0x1a8>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff feb3 	bl	8001218 <HAL_SYSCFG_ETHInterfaceSelect>
 80014b2:	e003      	b.n	80014bc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014b8:	f7ff feae 	bl	8001218 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fe66 	bl	80011a4 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014da:	e00f      	b.n	80014fc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80014dc:	f7ff fe62 	bl	80011a4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ea:	d907      	bls.n	80014fc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2204      	movs	r2, #4
 80014f0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	22e0      	movs	r2, #224	; 0xe0
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e081      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e6      	bne.n	80014dc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fac0 	bl	8001a94 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001514:	f001 fe80 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	4b3c      	ldr	r3, [pc, #240]	; (800160c <HAL_ETH_Init+0x1ac>)
 800151c:	fba3 2302 	umull	r2, r3, r3, r2
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3a01      	subs	r2, #1
 8001528:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fa13 	bl	8001958 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001548:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800154c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	22e0      	movs	r2, #224	; 0xe0
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e04a      	b.n	8001600 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001572:	4413      	add	r3, r2
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_ETH_Init+0x1b0>)
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6952      	ldr	r2, [r2, #20]
 800157e:	0052      	lsls	r2, r2, #1
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	431a      	orrs	r2, r3
 8001586:	f241 1308 	movw	r3, #4360	; 0x1108
 800158a:	440b      	add	r3, r1
 800158c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fad8 	bl	8001b44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb1c 	bl	8001bd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	3305      	adds	r3, #5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	021a      	lsls	r2, r3, #8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	061a      	lsls	r2, r3, #24
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	3302      	adds	r3, #2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2210      	movs	r2, #16
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2210      	movs	r2, #16
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	58024400 	.word	0x58024400
 800160c:	431bde83 	.word	0x431bde83
 8001610:	ffff8001 	.word	0xffff8001

08001614 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001626:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800162e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001636:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	7b5b      	ldrb	r3, [r3, #13]
 800163c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800163e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7bdb      	ldrb	r3, [r3, #15]
 800164c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800164e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	7c12      	ldrb	r2, [r2, #16]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <ETH_SetMACConfig+0x4a>
 8001658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0x4c>
 800165e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001660:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	7c52      	ldrb	r2, [r2, #17]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d102      	bne.n	8001670 <ETH_SetMACConfig+0x5c>
 800166a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166e:	e000      	b.n	8001672 <ETH_SetMACConfig+0x5e>
 8001670:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001672:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7c9b      	ldrb	r3, [r3, #18]
 8001678:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800167a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001680:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001686:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800168e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7f5b      	ldrb	r3, [r3, #29]
 8001694:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001696:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	7f92      	ldrb	r2, [r2, #30]
 800169c:	2a00      	cmp	r2, #0
 800169e:	d102      	bne.n	80016a6 <ETH_SetMACConfig+0x92>
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	e000      	b.n	80016a8 <ETH_SetMACConfig+0x94>
 80016a6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80016a8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	7fdb      	ldrb	r3, [r3, #31]
 80016ae:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80016b0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d102      	bne.n	80016c2 <ETH_SetMACConfig+0xae>
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	e000      	b.n	80016c4 <ETH_SetMACConfig+0xb0>
 80016c2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016c4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80016ca:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016d2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80016d4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <ETH_SetMACConfig+0x22c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001700:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001708:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800170a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001712:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001714:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800171c:	2a00      	cmp	r2, #0
 800171e:	d102      	bne.n	8001726 <ETH_SetMACConfig+0x112>
 8001720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001724:	e000      	b.n	8001728 <ETH_SetMACConfig+0x114>
 8001726:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001728:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <ETH_SetMACConfig+0x230>)
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	430b      	orrs	r3, r1
 8001744:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001752:	4313      	orrs	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <ETH_SetMACConfig+0x234>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	430b      	orrs	r3, r1
 8001768:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001770:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001776:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800177e:	2a00      	cmp	r2, #0
 8001780:	d101      	bne.n	8001786 <ETH_SetMACConfig+0x172>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	e000      	b.n	8001788 <ETH_SetMACConfig+0x174>
 8001786:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001788:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800179a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f023 0103 	bic.w	r1, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80017de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d101      	bne.n	8001802 <ETH_SetMACConfig+0x1ee>
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	e000      	b.n	8001804 <ETH_SetMACConfig+0x1f0>
 8001802:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001804:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800180c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800180e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001816:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001818:	4313      	orrs	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001824:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	430a      	orrs	r2, r1
 8001830:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	00048083 	.word	0x00048083
 8001844:	c0f88000 	.word	0xc0f88000
 8001848:	fffffef0 	.word	0xfffffef0

0800184c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <ETH_SetDMAConfig+0xf8>)
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001872:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	791b      	ldrb	r3, [r3, #4]
 8001878:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800187e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001892:	4413      	add	r3, r2
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <ETH_SetDMAConfig+0xfc>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6811      	ldr	r1, [r2, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80018a6:	440b      	add	r3, r1
 80018a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7b5b      	ldrb	r3, [r3, #13]
 80018ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <ETH_SetDMAConfig+0x100>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80018d2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018de:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	7f5b      	ldrb	r3, [r3, #29]
 80018e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f241 1304 	movw	r3, #4356	; 0x1104
 80018f2:	4413      	add	r3, r2
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <ETH_SetDMAConfig+0x104>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	431a      	orrs	r2, r3
 8001902:	f241 1304 	movw	r3, #4356	; 0x1104
 8001906:	440b      	add	r3, r1
 8001908:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001920:	4413      	add	r3, r2
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <ETH_SetDMAConfig+0x108>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6811      	ldr	r1, [r2, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	431a      	orrs	r2, r3
 8001930:	f241 1308 	movw	r3, #4360	; 0x1108
 8001934:	440b      	add	r3, r1
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	ffff87fd 	.word	0xffff87fd
 8001948:	ffff2ffe 	.word	0xffff2ffe
 800194c:	fffec000 	.word	0xfffec000
 8001950:	ffc0efef 	.word	0xffc0efef
 8001954:	7fc0ffff 	.word	0x7fc0ffff

08001958 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0a4      	sub	sp, #144	; 0x90
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001966:	2300      	movs	r3, #0
 8001968:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019d2:	2300      	movs	r3, #0
 80019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019da:	2300      	movs	r3, #0
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019f0:	2320      	movs	r3, #32
 80019f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a32:	2300      	movs	r3, #0
 8001a34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fde6 	bl	8001614 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001a78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fee1 	bl	800184c <ETH_SetDMAConfig>
}
 8001a8a:	bf00      	nop
 8001a8c:	3790      	adds	r7, #144	; 0x90
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001aae:	f001 fbb3 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8001ab2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d908      	bls.n	8001ace <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d804      	bhi.n	8001ace <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e027      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d908      	bls.n	8001ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d804      	bhi.n	8001ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e01a      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d903      	bls.n	8001af8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d911      	bls.n	8001b1c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d908      	bls.n	8001b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d804      	bhi.n	8001b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e005      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e000      	b.n	8001b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b1c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	01312cff 	.word	0x01312cff
 8001b34:	02160ebf 	.word	0x02160ebf
 8001b38:	039386ff 	.word	0x039386ff
 8001b3c:	05f5e0ff 	.word	0x05f5e0ff
 8001b40:	08f0d17f 	.word	0x08f0d17f

08001b44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e01d      	b.n	8001b8e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	3206      	adds	r2, #6
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d9de      	bls.n	8001b52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f241 1314 	movw	r3, #4372	; 0x1114
 8001bb4:	4413      	add	r3, r2
 8001bb6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e024      	b.n	8001c2a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6919      	ldr	r1, [r3, #16]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	330a      	adds	r3, #10
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d9d7      	bls.n	8001be0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f241 1330 	movw	r3, #4400	; 0x1130
 8001c56:	4413      	add	r3, r2
 8001c58:	2203      	movs	r2, #3
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f241 131c 	movw	r3, #4380	; 0x111c
 8001c68:	4413      	add	r3, r2
 8001c6a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f241 1328 	movw	r3, #4392	; 0x1128
 8001c7c:	4413      	add	r3, r2
 8001c7e:	6019      	str	r1, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c9a:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_GPIO_Init+0x234>)
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	e194      	b.n	8001fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8186 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_GPIO_Init+0x4c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d007      	beq.n	8001cd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ccc:	2b11      	cmp	r3, #17
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b12      	cmp	r3, #18
 8001cd6:	d130      	bne.n	8001d3a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0e:	2201      	movs	r2, #1
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0201 	and.w	r2, r3, #1
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0xee>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e0 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_GPIO_Init+0x23c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x240>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d052      	beq.n	8001ef4 <HAL_GPIO_Init+0x268>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_GPIO_Init+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_GPIO_Init+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_GPIO_Init+0x24c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_GPIO_Init+0x250>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x254>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_GPIO_Init+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_GPIO_Init+0x25c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_GPIO_Init+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_GPIO_Init+0x264>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e02d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e02b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e029      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e027      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e025      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e023      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e021      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ebe:	bf00      	nop
 8001ec0:	58000080 	.word	0x58000080
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58021400 	.word	0x58021400
 8001ee4:	58021800 	.word	0x58021800
 8001ee8:	58021c00 	.word	0x58021c00
 8001eec:	58022000 	.word	0x58022000
 8001ef0:	58022400 	.word	0x58022400
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4938      	ldr	r1, [pc, #224]	; (8001fe8 <HAL_GPIO_Init+0x35c>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae63 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	58000400 	.word	0x58000400

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	401a      	ands	r2, r3
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	429a      	cmp	r2, r3
 8002066:	d104      	bne.n	8002072 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	041a      	lsls	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	b08f      	sub	sp, #60	; 0x3c
 8002088:	af0a      	add	r7, sp, #40	; 0x28
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e116      	b.n	80022c4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe feab 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 ff73 	bl	8005fc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	687e      	ldr	r6, [r7, #4]
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f8:	1d33      	adds	r3, r6, #4
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f003 fefd 	bl	8005efc <USB_CoreInit>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0d7      	b.n	80022c4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f003 ff61 	bl	8005fe2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e04a      	b.n	80021bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	333d      	adds	r3, #61	; 0x3d
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	333c      	adds	r3, #60	; 0x3c
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b298      	uxth	r0, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3342      	adds	r3, #66	; 0x42
 8002162:	4602      	mov	r2, r0
 8002164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	333f      	adds	r3, #63	; 0x3f
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3344      	adds	r3, #68	; 0x44
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3348      	adds	r3, #72	; 0x48
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3350      	adds	r3, #80	; 0x50
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3af      	bcc.n	8002126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e044      	b.n	8002256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3b5      	bcc.n	80021cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f003 fed8 	bl	8006038 <USB_DevInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e014      	b.n	80022c4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f80a 	bl	80022cc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f87a 	bl	80063b6 <USB_DevDisconnect>

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PCDEx_ActivateLPM+0x44>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	10000003 	.word	0x10000003

08002314 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00a      	beq.n	800233e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01f      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e01d      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800234e:	f7fe ff29 	bl	80011a4 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002354:	e009      	b.n	800236a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002356:	f7fe ff25 	bl	80011a4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002364:	d901      	bls.n	800236a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e007      	b.n	800237a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_PWREx_ConfigSupply+0x70>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002376:	d1ee      	bne.n	8002356 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	58024800 	.word	0x58024800

08002388 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	58024800 	.word	0x58024800

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3ff      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8087 	beq.w	80024d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c8:	4b99      	ldr	r3, [pc, #612]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d2:	4b97      	ldr	r3, [pc, #604]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d007      	beq.n	80023ee <HAL_RCC_OscConfig+0x46>
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	2b18      	cmp	r3, #24
 80023e2:	d110      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d10b      	bne.n	8002406 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ee:	4b90      	ldr	r3, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d06c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x12c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d168      	bne.n	80024d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e3d9      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x76>
 8002410:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a86      	ldr	r2, [pc, #536]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02e      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a81      	ldr	r2, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7e      	ldr	r2, [pc, #504]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0xbc>
 800244a:	4b79      	ldr	r3, [pc, #484]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xd4>
 8002464:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe8e 	bl	80011a4 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fe8a 	bl	80011a4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e38d      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249e:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xe4>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fe7a 	bl	80011a4 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fe76 	bl	80011a4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e379      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024c6:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x10c>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80ae 	beq.w	8002640 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e4:	4b52      	ldr	r3, [pc, #328]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ee:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_RCC_OscConfig+0x162>
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2b18      	cmp	r3, #24
 80024fe:	d13a      	bne.n	8002576 <HAL_RCC_OscConfig+0x1ce>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d135      	bne.n	8002576 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x17a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e34b      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	f7fe fe6d 	bl	8001200 <HAL_GetREVID>
 8002526:	4602      	mov	r2, r0
 8002528:	f241 0303 	movw	r3, #4099	; 0x1003
 800252c:	429a      	cmp	r2, r3
 800252e:	d817      	bhi.n	8002560 <HAL_RCC_OscConfig+0x1b8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d108      	bne.n	800254a <HAL_RCC_OscConfig+0x1a2>
 8002538:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002540:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002546:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e07a      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	4935      	ldr	r1, [pc, #212]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255e:	e06f      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	4930      	ldr	r1, [pc, #192]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	e064      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d045      	beq.n	800260a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0219 	bic.w	r2, r3, #25
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4929      	ldr	r1, [pc, #164]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fe08 	bl	80011a4 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fe04 	bl	80011a4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e307      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	f7fe fe23 	bl	8001200 <HAL_GetREVID>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d817      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x24c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d108      	bne.n	80025de <HAL_RCC_OscConfig+0x236>
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025d4:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025da:	6053      	str	r3, [r2, #4]
 80025dc:	e030      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	031b      	lsls	r3, r3, #12
 80025ec:	4910      	ldr	r1, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e025      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e01a      	b.n	8002640 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fdc5 	bl	80011a4 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fdc1 	bl	80011a4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d903      	bls.n	8002634 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e2c4      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
 8002630:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002634:	4ba4      	ldr	r3, [pc, #656]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ee      	bne.n	800261e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a9 	beq.w	80027a0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002658:	4b9b      	ldr	r3, [pc, #620]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x2cc>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b18      	cmp	r3, #24
 8002668:	d13a      	bne.n	80026e0 <HAL_RCC_OscConfig+0x338>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d135      	bne.n	80026e0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002674:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x2e4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e296      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268c:	f7fe fdb8 	bl	8001200 <HAL_GetREVID>
 8002690:	4602      	mov	r2, r0
 8002692:	f241 0303 	movw	r3, #4099	; 0x1003
 8002696:	429a      	cmp	r2, r3
 8002698:	d817      	bhi.n	80026ca <HAL_RCC_OscConfig+0x322>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0x30c>
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026aa:	4a87      	ldr	r2, [pc, #540]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b2:	e075      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b4:	4b84      	ldr	r3, [pc, #528]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	4981      	ldr	r1, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c8:	e06a      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	497b      	ldr	r1, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026de:	e05f      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d042      	beq.n	800276e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026e8:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a76      	ldr	r2, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80026ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd56 	bl	80011a4 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026fc:	f7fe fd52 	bl	80011a4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e255      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800270e:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800271a:	f7fe fd71 	bl	8001200 <HAL_GetREVID>
 800271e:	4602      	mov	r2, r0
 8002720:	f241 0303 	movw	r3, #4099	; 0x1003
 8002724:	429a      	cmp	r2, r3
 8002726:	d817      	bhi.n	8002758 <HAL_RCC_OscConfig+0x3b0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d108      	bne.n	8002742 <HAL_RCC_OscConfig+0x39a>
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002738:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 800273a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800273e:	6053      	str	r3, [r2, #4]
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
 8002742:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	495d      	ldr	r1, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
 8002756:	e023      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
 8002758:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4958      	ldr	r1, [pc, #352]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
 800276c:	e018      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fd13 	bl	80011a4 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002782:	f7fe fd0f 	bl	80011a4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e212      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d036      	beq.n	800281a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d019      	beq.n	80027e8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b4:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fcf0 	bl	80011a4 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c8:	f7fe fcec 	bl	80011a4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1ef      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x420>
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fcd6 	bl	80011a4 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fcd2 	bl	80011a4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1d5      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800283a:	f7fe fcb3 	bl	80011a4 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002842:	f7fe fcaf 	bl	80011a4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1b2      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x49a>
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 8002868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800286c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286e:	f7fe fc99 	bl	80011a4 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002876:	f7fe fc95 	bl	80011a4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e198      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x520>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8085 	beq.w	80029ac <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_RCC_OscConfig+0x524>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x524>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fc79 	bl	80011a4 <HAL_GetTick>
 80028b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b4:	e00c      	b.n	80028d0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7fe fc75 	bl	80011a4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d905      	bls.n	80028d0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e178      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028d0:	4b96      	ldr	r3, [pc, #600]	; (8002b2c <HAL_RCC_OscConfig+0x784>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ec      	beq.n	80028b6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x54a>
 80028e4:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a91      	ldr	r2, [pc, #580]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e02d      	b.n	800294e <HAL_RCC_OscConfig+0x5a6>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x56c>
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a8c      	ldr	r2, [pc, #560]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b8a      	ldr	r3, [pc, #552]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a89      	ldr	r2, [pc, #548]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x5a6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x58e>
 800291c:	4b84      	ldr	r3, [pc, #528]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a83      	ldr	r2, [pc, #524]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a80      	ldr	r2, [pc, #512]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x5a6>
 8002936:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a7d      	ldr	r2, [pc, #500]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	4b7b      	ldr	r3, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a7a      	ldr	r2, [pc, #488]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fc25 	bl	80011a4 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fc21 	bl	80011a4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e122      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002974:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x5b6>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fc0f 	bl	80011a4 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fc0b 	bl	80011a4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e10c      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029a0:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8101 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029b6:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029be:	2b18      	cmp	r3, #24
 80029c0:	f000 80bc 	beq.w	8002b3c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f040 8095 	bne.w	8002af8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b58      	ldr	r3, [pc, #352]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fbe3 	bl	80011a4 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fbdf 	bl	80011a4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0e2      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f4:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a04:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <HAL_RCC_OscConfig+0x78c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	430a      	orrs	r2, r1
 8002a14:	4946      	ldr	r1, [pc, #280]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	628b      	str	r3, [r1, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	3b01      	subs	r3, #1
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a4a:	4939      	ldr	r1, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a5c:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <HAL_RCC_OscConfig+0x790>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a68:	00d2      	lsls	r2, r2, #3
 8002a6a:	4931      	ldr	r1, [pc, #196]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a70:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f023 020c 	bic.w	r2, r3, #12
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	492c      	ldr	r1, [pc, #176]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f023 0202 	bic.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4928      	ldr	r1, [pc, #160]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fb68 	bl	80011a4 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fb64 	bl	80011a4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e067      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x730>
 8002af6:	e05f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb4e 	bl	80011a4 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fb4a 	bl	80011a4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04d      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_OscConfig+0x788>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x764>
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x810>
 8002b2c:	58024800 	.word	0x58024800
 8002b30:	58024400 	.word	0x58024400
 8002b34:	fffffc0c 	.word	0xfffffc0c
 8002b38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCC_OscConfig+0x81c>)
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_OscConfig+0x81c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d031      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d12a      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d122      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d11a      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d111      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0e1b      	lsrs	r3, r3, #24
 8002ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400

08002bc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e19c      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b8a      	ldr	r3, [pc, #552]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	4985      	ldr	r1, [pc, #532]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e184      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d908      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c28:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4975      	ldr	r1, [pc, #468]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d908      	bls.n	8002c68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c56:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	496a      	ldr	r1, [pc, #424]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d908      	bls.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c84:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	495e      	ldr	r1, [pc, #376]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d908      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4953      	ldr	r1, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d908      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f023 020f 	bic.w	r2, r3, #15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4947      	ldr	r1, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d055      	beq.n	8002daa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4940      	ldr	r1, [pc, #256]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d18:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d121      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0f6      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0ea      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0de      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d58:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0d6      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f023 0207 	bic.w	r2, r3, #7
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4925      	ldr	r1, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fa13 	bl	80011a4 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe fa0f 	bl	80011a4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0be      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d1eb      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d208      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f023 020f 	bic.w	r2, r3, #15
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d214      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4906      	ldr	r1, [pc, #24]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e086      	b.n	8002f16 <HAL_RCC_ClockConfig+0x34e>
 8002e08:	52002000 	.word	0x52002000
 8002e0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d208      	bcs.n	8002e3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	4939      	ldr	r1, [pc, #228]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d208      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	492e      	ldr	r1, [pc, #184]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d208      	bcs.n	8002e9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d208      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4917      	ldr	r1, [pc, #92]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ec8:	f000 f834 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x35c>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_RCC_ClockConfig+0x35c>)
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x360>)
 8002efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x364>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x368>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe f900 	bl	8001110 <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	58024400 	.word	0x58024400
 8002f24:	080064d0 	.word	0x080064d0
 8002f28:	24000004 	.word	0x24000004
 8002f2c:	24000000 	.word	0x24000000
 8002f30:	24000008 	.word	0x24000008

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3a:	4baf      	ldr	r3, [pc, #700]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f42:	2b18      	cmp	r3, #24
 8002f44:	f200 814e 	bhi.w	80031e4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	080031e5 	.word	0x080031e5
 8002f58:	080031e5 	.word	0x080031e5
 8002f5c:	080031e5 	.word	0x080031e5
 8002f60:	080031e5 	.word	0x080031e5
 8002f64:	080031e5 	.word	0x080031e5
 8002f68:	080031e5 	.word	0x080031e5
 8002f6c:	080031e5 	.word	0x080031e5
 8002f70:	08002fdb 	.word	0x08002fdb
 8002f74:	080031e5 	.word	0x080031e5
 8002f78:	080031e5 	.word	0x080031e5
 8002f7c:	080031e5 	.word	0x080031e5
 8002f80:	080031e5 	.word	0x080031e5
 8002f84:	080031e5 	.word	0x080031e5
 8002f88:	080031e5 	.word	0x080031e5
 8002f8c:	080031e5 	.word	0x080031e5
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	080031e5 	.word	0x080031e5
 8002f98:	080031e5 	.word	0x080031e5
 8002f9c:	080031e5 	.word	0x080031e5
 8002fa0:	080031e5 	.word	0x080031e5
 8002fa4:	080031e5 	.word	0x080031e5
 8002fa8:	080031e5 	.word	0x080031e5
 8002fac:	080031e5 	.word	0x080031e5
 8002fb0:	08002fe7 	.word	0x08002fe7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb4:	4b90      	ldr	r3, [pc, #576]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fc0:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	4a8c      	ldr	r2, [pc, #560]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002fd2:	e10a      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fd4:	4b89      	ldr	r3, [pc, #548]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002fd6:	61bb      	str	r3, [r7, #24]
    break;
 8002fd8:	e107      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fda:	4b89      	ldr	r3, [pc, #548]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002fdc:	61bb      	str	r3, [r7, #24]
    break;
 8002fde:	e104      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002fe0:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002fe2:	61bb      	str	r3, [r7, #24]
    break;
 8002fe4:	e101      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fe6:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ff0:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ffc:	4b7e      	ldr	r3, [pc, #504]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003006:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	08db      	lsrs	r3, r3, #3
 800300c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80da 	beq.w	80031de <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d05a      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003030:	2b01      	cmp	r3, #1
 8003032:	d302      	bcc.n	800303a <HAL_RCC_GetSysClockFreq+0x106>
 8003034:	2b02      	cmp	r3, #2
 8003036:	d078      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003038:	e099      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02d      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003046:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	4a6a      	ldr	r2, [pc, #424]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003080:	ed97 6a02 	vldr	s12, [r7, #8]
 8003084:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ac:	eddf 6a57 	vldr	s13, [pc, #348]	; 800320c <HAL_RCC_GetSysClockFreq+0x2d8>
 80030b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2d4>
 80030cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030e4:	e065      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2dc>
 80030f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003108:	ed97 6a02 	vldr	s12, [r7, #8]
 800310c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003128:	e043      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003214 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313c:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003150:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003168:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800316c:	e021      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003210 <HAL_RCC_GetSysClockFreq+0x2dc>
 800317c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003190:	ed97 6a02 	vldr	s12, [r7, #8]
 8003194:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003208 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	0a5b      	lsrs	r3, r3, #9
 80031b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031bc:	3301      	adds	r3, #1
 80031be:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80031ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d6:	ee17 3a90 	vmov	r3, s15
 80031da:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80031dc:	e005      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
    break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80031e6:	61bb      	str	r3, [r7, #24]
    break;
 80031e8:	bf00      	nop
  }

  return sysclockfreq;
 80031ea:	69bb      	ldr	r3, [r7, #24]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3724      	adds	r7, #36	; 0x24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	58024400 	.word	0x58024400
 80031fc:	03d09000 	.word	0x03d09000
 8003200:	003d0900 	.word	0x003d0900
 8003204:	007a1200 	.word	0x007a1200
 8003208:	46000000 	.word	0x46000000
 800320c:	4c742400 	.word	0x4c742400
 8003210:	4a742400 	.word	0x4a742400
 8003214:	4af42400 	.word	0x4af42400

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800321e:	f7ff fe89 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8003222:	4601      	mov	r1, r0
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa21 f303 	lsr.w	r3, r1, r3
 800323a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 8003254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58024400 	.word	0x58024400
 800326c:	080064d0 	.word	0x080064d0
 8003270:	24000004 	.word	0x24000004
 8003274:	24000000 	.word	0x24000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800327c:	f7ff ffcc 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003280:	4601      	mov	r1, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	58024400 	.word	0x58024400
 80032a0:	080064d0 	.word	0x080064d0

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032a8:	f7ff ffb6 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58024400 	.word	0x58024400
 80032cc:	080064d0 	.word	0x080064d0

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d03d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f4:	d013      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fa:	d802      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003300:	e01f      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003306:	d013      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800330c:	d01c      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800330e:	e018      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003310:	4baf      	ldr	r3, [pc, #700]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	4aae      	ldr	r2, [pc, #696]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f96f 	bl	8004608 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800332e:	e00c      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3324      	adds	r3, #36	; 0x24
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fa18 	bl	800476c <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
      break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003350:	4b9f      	ldr	r3, [pc, #636]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335c:	499c      	ldr	r1, [pc, #624]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800335e:	4313      	orrs	r3, r2
 8003360:	650b      	str	r3, [r1, #80]	; 0x50
 8003362:	e001      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03d      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	2b04      	cmp	r3, #4
 800337a:	d826      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003399 	.word	0x08003399
 8003388:	080033a7 	.word	0x080033a7
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033d1 	.word	0x080033d1
 8003394:	080033d1 	.word	0x080033d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003398:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4a8c      	ldr	r2, [pc, #560]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800339e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033a4:	e015      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f001 f92b 	bl	8004608 <RCCEx_PLL2_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033b6:	e00c      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 f9d4 	bl	800476c <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
      break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80033d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d8:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	497a      	ldr	r1, [pc, #488]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	650b      	str	r3, [r1, #80]	; 0x50
 80033ea:	e001      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
 80033ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03e      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d01c      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003404:	2b80      	cmp	r3, #128	; 0x80
 8003406:	d804      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d00d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003410:	e01e      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003412:	2bc0      	cmp	r3, #192	; 0xc0
 8003414:	d01f      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d01e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800341c:	e018      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a6b      	ldr	r2, [pc, #428]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800342a:	e017      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f8e8 	bl	8004608 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800343c:	e00e      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3324      	adds	r3, #36	; 0x24
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f991 	bl	800476c <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800344e:	e005      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800345a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4958      	ldr	r1, [pc, #352]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003470:	4313      	orrs	r3, r2
 8003472:	650b      	str	r3, [r1, #80]	; 0x50
 8003474:	e001      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800348c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003490:	d01f      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d805      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800349c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a0:	d00e      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80034a2:	e01f      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80034a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034a8:	d01f      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80034aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ae:	d01e      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034b0:	e018      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034be:	e017      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 f89e 	bl	8004608 <RCCEx_PLL2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034d0:	e00e      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3324      	adds	r3, #36	; 0x24
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f947 	bl	800476c <RCCEx_PLL3_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e2:	e005      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
      break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80034ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003504:	4932      	ldr	r1, [pc, #200]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003506:	4313      	orrs	r3, r2
 8003508:	658b      	str	r3, [r1, #88]	; 0x58
 800350a:	e001      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d044      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003526:	d01f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352c:	d805      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003536:	d00e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003538:	e01f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800353a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800353e:	d01f      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003544:	d01e      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003546:	e018      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003554:	e017      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f853 	bl	8004608 <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003566:	e00e      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f8fc 	bl	800476c <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
      break;
 800357e:	e002      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800359a:	490d      	ldr	r1, [pc, #52]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800359c:	4313      	orrs	r3, r2
 800359e:	658b      	str	r3, [r1, #88]	; 0x58
 80035a0:	e001      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d035      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d00c      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d802      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80035c2:	e017      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d00c      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80035c8:	2b30      	cmp	r3, #48	; 0x30
 80035ca:	d018      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80035cc:	e012      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80035ce:	bf00      	nop
 80035d0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d4:	4baf      	ldr	r3, [pc, #700]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4aae      	ldr	r2, [pc, #696]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035e0:	e00e      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 f80d 	bl	8004608 <RCCEx_PLL2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035f2:	e005      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	75fb      	strb	r3, [r7, #23]
      break;
 80035f8:	e002      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80035fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003606:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003612:	49a0      	ldr	r1, [pc, #640]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003618:	e001      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d042      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d01f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003638:	d805      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d00e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003644:	e01f      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800364a:	d01f      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800364c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003650:	d01e      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003652:	e018      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4a8e      	ldr	r2, [pc, #568]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003660:	e017      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 ffcd 	bl	8004608 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003672:	e00e      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3324      	adds	r3, #36	; 0x24
 8003678:	2100      	movs	r1, #0
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f876 	bl	800476c <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003684:	e005      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
      break;
 800368a:	e002      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	497b      	ldr	r1, [pc, #492]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	650b      	str	r3, [r1, #80]	; 0x50
 80036aa:	e001      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d042      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c4:	d01b      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ca:	d805      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d022      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036d6:	e01b      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80036d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036dc:	d01d      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80036de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e2:	d01c      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80036e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036e8:	d01b      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80036ea:	e011      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 ff88 	bl	8004608 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036fc:	e012      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3324      	adds	r3, #36	; 0x24
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f831 	bl	800476c <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
      break;
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800372a:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	4957      	ldr	r1, [pc, #348]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	650b      	str	r3, [r1, #80]	; 0x50
 800373c:	e001      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003758:	d01b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800375a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375e:	d805      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800376a:	e01b      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d01d      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003776:	d01c      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800377c:	d01b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f000 ff3e 	bl	8004608 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003790:	e012      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ffe7 	bl	800476c <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75fb      	strb	r3, [r7, #23]
      break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e004      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80037b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037cc:	4931      	ldr	r1, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	658b      	str	r3, [r1, #88]	; 0x58
 80037d2:	e001      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ec:	d005      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80037ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f2:	d009      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80037f8:	e00f      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003806:	e00c      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fefa 	bl	8004608 <RCCEx_PLL2_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
      break;
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003834:	4917      	ldr	r1, [pc, #92]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	650b      	str	r3, [r1, #80]	; 0x50
 800383a:	e001      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d035      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	2b03      	cmp	r3, #3
 8003852:	d81b      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003899 	.word	0x08003899
 8003860:	0800386d 	.word	0x0800386d
 8003864:	0800387b 	.word	0x0800387b
 8003868:	08003899 	.word	0x08003899
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003878:	e00f      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fec1 	bl	8004608 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800388a:	e006      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	75fb      	strb	r3, [r7, #23]
      break;
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003892:	bf00      	nop
 8003894:	58024400 	.word	0x58024400
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038a0:	4bba      	ldr	r3, [pc, #744]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	49b7      	ldr	r1, [pc, #732]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8086 	beq.w	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c6:	4bb2      	ldr	r3, [pc, #712]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4ab1      	ldr	r2, [pc, #708]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fd fc67 	bl	80011a4 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	e009      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fd fc63 	bl	80011a4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b64      	cmp	r3, #100	; 0x64
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	75fb      	strb	r3, [r7, #23]
        break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ee:	4ba8      	ldr	r3, [pc, #672]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ef      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d166      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003900:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800390a:	4053      	eors	r3, r2
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003914:	4b9d      	ldr	r3, [pc, #628]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800391e:	4b9b      	ldr	r3, [pc, #620]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a9a      	ldr	r2, [pc, #616]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800392a:	4b98      	ldr	r3, [pc, #608]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a97      	ldr	r2, [pc, #604]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003936:	4a95      	ldr	r2, [pc, #596]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d115      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fc2c 	bl	80011a4 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800394e:	e00b      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fd fc28 	bl	80011a4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d902      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	75fb      	strb	r3, [r7, #23]
            break;
 8003966:	e005      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ed      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d126      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003988:	d10d      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800398a:	4b80      	ldr	r3, [pc, #512]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003998:	0919      	lsrs	r1, r3, #4
 800399a:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800399c:	400b      	ands	r3, r1
 800399e:	497b      	ldr	r1, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80039a6:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4a78      	ldr	r2, [pc, #480]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039b0:	6113      	str	r3, [r2, #16]
 80039b2:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	4972      	ldr	r1, [pc, #456]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	670b      	str	r3, [r1, #112]	; 0x70
 80039c6:	e004      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	75bb      	strb	r3, [r7, #22]
 80039cc:	e001      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d07d      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e2:	2b28      	cmp	r3, #40	; 0x28
 80039e4:	d866      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003abb 	.word	0x08003abb
 80039f0:	08003ab5 	.word	0x08003ab5
 80039f4:	08003ab5 	.word	0x08003ab5
 80039f8:	08003ab5 	.word	0x08003ab5
 80039fc:	08003ab5 	.word	0x08003ab5
 8003a00:	08003ab5 	.word	0x08003ab5
 8003a04:	08003ab5 	.word	0x08003ab5
 8003a08:	08003ab5 	.word	0x08003ab5
 8003a0c:	08003a91 	.word	0x08003a91
 8003a10:	08003ab5 	.word	0x08003ab5
 8003a14:	08003ab5 	.word	0x08003ab5
 8003a18:	08003ab5 	.word	0x08003ab5
 8003a1c:	08003ab5 	.word	0x08003ab5
 8003a20:	08003ab5 	.word	0x08003ab5
 8003a24:	08003ab5 	.word	0x08003ab5
 8003a28:	08003ab5 	.word	0x08003ab5
 8003a2c:	08003aa3 	.word	0x08003aa3
 8003a30:	08003ab5 	.word	0x08003ab5
 8003a34:	08003ab5 	.word	0x08003ab5
 8003a38:	08003ab5 	.word	0x08003ab5
 8003a3c:	08003ab5 	.word	0x08003ab5
 8003a40:	08003ab5 	.word	0x08003ab5
 8003a44:	08003ab5 	.word	0x08003ab5
 8003a48:	08003ab5 	.word	0x08003ab5
 8003a4c:	08003abb 	.word	0x08003abb
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003ab5 	.word	0x08003ab5
 8003a58:	08003ab5 	.word	0x08003ab5
 8003a5c:	08003ab5 	.word	0x08003ab5
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ab5 	.word	0x08003ab5
 8003a6c:	08003abb 	.word	0x08003abb
 8003a70:	08003ab5 	.word	0x08003ab5
 8003a74:	08003ab5 	.word	0x08003ab5
 8003a78:	08003ab5 	.word	0x08003ab5
 8003a7c:	08003ab5 	.word	0x08003ab5
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003abb 	.word	0x08003abb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fdb6 	bl	8004608 <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fe5f 	bl	800476c <RCCEx_PLL3_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ace:	492f      	ldr	r1, [pc, #188]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d037      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d820      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b37 	.word	0x08003b37
 8003af8:	08003b0d 	.word	0x08003b0d
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2101      	movs	r1, #1
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fd78 	bl	8004608 <RCCEx_PLL2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3324      	adds	r3, #36	; 0x24
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fe21 	bl	800476c <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4a:	4910      	ldr	r1, [pc, #64]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	654b      	str	r3, [r1, #84]	; 0x54
 8003b50:	e001      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d040      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d827      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003bc3 	.word	0x08003bc3
 8003b78:	08003b99 	.word	0x08003b99
 8003b7c:	08003bab 	.word	0x08003bab
 8003b80:	08003bc3 	.word	0x08003bc3
 8003b84:	08003bc3 	.word	0x08003bc3
 8003b88:	08003bc3 	.word	0x08003bc3
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58024800 	.word	0x58024800
 8003b94:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fd32 	bl	8004608 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fddb 	bl	800476c <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bca:	4bb2      	ldr	r3, [pc, #712]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	49ae      	ldr	r1, [pc, #696]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d044      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfa:	d01b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c00:	d805      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d022      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003c0c:	e01b      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d01d      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c18:	d01c      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c1e:	d01b      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003c20:	e011      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fced 	bl	8004608 <RCCEx_PLL2_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c32:	e012      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3324      	adds	r3, #36	; 0x24
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fd96 	bl	800476c <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c44:	e009      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4a:	e006      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e004      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c50:	bf00      	nop
 8003c52:	e002      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c54:	bf00      	nop
 8003c56:	e000      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6e:	4989      	ldr	r1, [pc, #548]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	654b      	str	r3, [r1, #84]	; 0x54
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d044      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d01b      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d805      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003ca2:	e01b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003caa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cae:	d01c      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb4:	d01b      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003cb6:	e011      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fca2 	bl	8004608 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e012      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fd4b 	bl	800476c <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf6:	4b67      	ldr	r3, [pc, #412]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d04:	4963      	ldr	r1, [pc, #396]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d044      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d26:	d01b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2c:	d805      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d022      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d38:	e01b      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003d40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d44:	d01c      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003d46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d4a:	d01b      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003d4c:	e011      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fc57 	bl	8004608 <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d5e:	e012      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fd00 	bl	800476c <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d70:	e009      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
      break;
 8003d76:	e006      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d78:	bf00      	nop
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d8c:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9a:	493e      	ldr	r1, [pc, #248]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	658b      	str	r3, [r1, #88]	; 0x58
 8003da0:	e001      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
 8003da4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	; 0x24
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fcd1 	bl	800476c <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dd4:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	492c      	ldr	r1, [pc, #176]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d10a      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	2102      	movs	r1, #2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fcb0 	bl	800476c <RCCEx_PLL3_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	491b      	ldr	r1, [pc, #108]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d032      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d00d      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e46:	d016      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fbd8 	bl	8004608 <RCCEx_PLL2_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e5c:	e00c      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3324      	adds	r3, #36	; 0x24
 8003e62:	2102      	movs	r1, #2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fc81 	bl	800476c <RCCEx_PLL3_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e8c:	4901      	ldr	r1, [pc, #4]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	658b      	str	r3, [r1, #88]	; 0x58
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02f      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eb2:	d00c      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb8:	d015      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4a78      	ldr	r2, [pc, #480]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fc49 	bl	800476c <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eee:	4b6e      	ldr	r3, [pc, #440]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	496a      	ldr	r1, [pc, #424]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	654b      	str	r3, [r1, #84]	; 0x54
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d029      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d007      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003f22:	e00f      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	4a5f      	ldr	r2, [pc, #380]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f30:	e00b      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fb65 	bl	8004608 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f42:	e002      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f50:	4b55      	ldr	r3, [pc, #340]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5c:	4952      	ldr	r1, [pc, #328]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3324      	adds	r3, #36	; 0x24
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fbf6 	bl	800476c <RCCEx_PLL3_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d00c      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d802      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003faa:	e00d      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d00f      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003fc6:	e007      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fea:	492f      	ldr	r1, [pc, #188]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004002:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4926      	ldr	r1, [pc, #152]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004020:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800402e:	491e      	ldr	r1, [pc, #120]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004040:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800404c:	4916      	ldr	r1, [pc, #88]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004068:	6113      	str	r3, [r2, #16]
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da08      	bge.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	4906      	ldr	r1, [pc, #24]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004090:	4313      	orrs	r3, r2
 8004092:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004094:	7dbb      	ldrb	r3, [r7, #22]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	58024400 	.word	0x58024400

080040ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040b0:	f7ff f8b2 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 80040b4:	4601      	mov	r1, r0
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	58024400 	.word	0x58024400
 80040d4:	080064d0 	.word	0x080064d0

080040d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040e0:	4b9d      	ldr	r3, [pc, #628]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80040ea:	4b9b      	ldr	r3, [pc, #620]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	0b1b      	lsrs	r3, r3, #12
 80040f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040f6:	4b98      	ldr	r3, [pc, #608]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004102:	4b95      	ldr	r3, [pc, #596]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	08db      	lsrs	r3, r3, #3
 8004108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 810a 	beq.w	800433a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d05a      	beq.n	80041e2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800412c:	2b01      	cmp	r3, #1
 800412e:	d302      	bcc.n	8004136 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004130:	2b02      	cmp	r3, #2
 8004132:	d078      	beq.n	8004226 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004134:	e099      	b.n	800426a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02d      	beq.n	800419e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	08db      	lsrs	r3, r3, #3
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	4a83      	ldr	r2, [pc, #524]	; (800435c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416c:	4b7a      	ldr	r3, [pc, #488]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004180:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800419c:	e087      	b.n	80042ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80041ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80041c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80041c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041e0:	e065      	b.n	80042ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80041f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f4:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004204:	ed97 6a03 	vldr	s12, [r7, #12]
 8004208:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800420c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004224:	e043      	b.n	80042ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004230:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004238:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004248:	ed97 6a03 	vldr	s12, [r7, #12]
 800424c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004268:	e021      	b.n	80042ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004274:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	ee07 3a90 	vmov	s15, r3
 8004288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004290:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042ac:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	0a5b      	lsrs	r3, r3, #9
 80042b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d4:	ee17 2a90 	vmov	r2, s15
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004302:	ee17 2a90 	vmov	r2, s15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	0e1b      	lsrs	r3, r3, #24
 8004310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004324:	edd7 6a07 	vldr	s13, [r7, #28]
 8004328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004330:	ee17 2a90 	vmov	r2, s15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004338:	e008      	b.n	800434c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	3724      	adds	r7, #36	; 0x24
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58024400 	.word	0x58024400
 800435c:	03d09000 	.word	0x03d09000
 8004360:	46000000 	.word	0x46000000
 8004364:	4c742400 	.word	0x4c742400
 8004368:	4a742400 	.word	0x4a742400
 800436c:	4af42400 	.word	0x4af42400

08004370 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004378:	4b9d      	ldr	r3, [pc, #628]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004382:	4b9b      	ldr	r3, [pc, #620]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	0d1b      	lsrs	r3, r3, #20
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800438e:	4b98      	ldr	r3, [pc, #608]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800439a:	4b95      	ldr	r3, [pc, #596]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	08db      	lsrs	r3, r3, #3
 80043a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 810a 	beq.w	80045d2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d05a      	beq.n	800447a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d302      	bcc.n	80043ce <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d078      	beq.n	80044be <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80043cc:	e099      	b.n	8004502 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043ce:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02d      	beq.n	8004436 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043da:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	4a83      	ldr	r2, [pc, #524]	; (80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004404:	4b7a      	ldr	r3, [pc, #488]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004414:	ed97 6a03 	vldr	s12, [r7, #12]
 8004418:	eddf 5a77 	vldr	s11, [pc, #476]	; 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800441c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004430:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004434:	e087      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004440:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004448:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004458:	ed97 6a03 	vldr	s12, [r7, #12]
 800445c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004478:	e065      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004484:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448c:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449c:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80044a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044bc:	e043      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80044cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d0:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80044e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004500:	e021      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004524:	ed97 6a03 	vldr	s12, [r7, #12]
 8004528:	eddf 5a33 	vldr	s11, [pc, #204]	; 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800452c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004544:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004546:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	0a5b      	lsrs	r3, r3, #9
 800454c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800455c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004560:	edd7 6a07 	vldr	s13, [r7, #28]
 8004564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456c:	ee17 2a90 	vmov	r2, s15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800458e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 2a90 	vmov	r2, s15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	0e1b      	lsrs	r3, r3, #24
 80045a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c8:	ee17 2a90 	vmov	r2, s15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	3724      	adds	r7, #36	; 0x24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	58024400 	.word	0x58024400
 80045f4:	03d09000 	.word	0x03d09000
 80045f8:	46000000 	.word	0x46000000
 80045fc:	4c742400 	.word	0x4c742400
 8004600:	4a742400 	.word	0x4a742400
 8004604:	4af42400 	.word	0x4af42400

08004608 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004616:	4b53      	ldr	r3, [pc, #332]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b03      	cmp	r3, #3
 8004620:	d101      	bne.n	8004626 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e099      	b.n	800475a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004626:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4e      	ldr	r2, [pc, #312]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800462c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fc fdb7 	bl	80011a4 <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004638:	e008      	b.n	800464c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800463a:	f7fc fdb3 	bl	80011a4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e086      	b.n	800475a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800464c:	4b45      	ldr	r3, [pc, #276]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	493f      	ldr	r1, [pc, #252]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	628b      	str	r3, [r1, #40]	; 0x28
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	3b01      	subs	r3, #1
 8004672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	3b01      	subs	r3, #1
 800467c:	025b      	lsls	r3, r3, #9
 800467e:	b29b      	uxth	r3, r3
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	3b01      	subs	r3, #1
 8004696:	061b      	lsls	r3, r3, #24
 8004698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800469c:	4931      	ldr	r1, [pc, #196]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046a2:	4b30      	ldr	r3, [pc, #192]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	492d      	ldr	r1, [pc, #180]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f023 0220 	bic.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4928      	ldr	r1, [pc, #160]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046c6:	4b27      	ldr	r3, [pc, #156]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a26      	ldr	r2, [pc, #152]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	f023 0310 	bic.w	r3, r3, #16
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <RCCEx_PLL2_Config+0x160>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	69d2      	ldr	r2, [r2, #28]
 80046de:	00d2      	lsls	r2, r2, #3
 80046e0:	4920      	ldr	r1, [pc, #128]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	f043 0310 	orr.w	r3, r3, #16
 80046f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a19      	ldr	r2, [pc, #100]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 80046fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004704:	e00f      	b.n	8004726 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004718:	e005      	b.n	8004726 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a11      	ldr	r2, [pc, #68]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800472c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004732:	f7fc fd37 	bl	80011a4 <HAL_GetTick>
 8004736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004738:	e008      	b.n	800474c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800473a:	f7fc fd33 	bl	80011a4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e006      	b.n	800475a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <RCCEx_PLL2_Config+0x15c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
 8004768:	ffff0007 	.word	0xffff0007

0800476c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b03      	cmp	r3, #3
 8004784:	d101      	bne.n	800478a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e099      	b.n	80048be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fc fd05 	bl	80011a4 <HAL_GetTick>
 800479a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800479c:	e008      	b.n	80047b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800479e:	f7fc fd01 	bl	80011a4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e086      	b.n	80048be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b0:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	051b      	lsls	r3, r3, #20
 80047ca:	493f      	ldr	r1, [pc, #252]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	628b      	str	r3, [r1, #40]	; 0x28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004800:	4931      	ldr	r1, [pc, #196]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4928      	ldr	r1, [pc, #160]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <RCCEx_PLL3_Config+0x160>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	69d2      	ldr	r2, [r2, #28]
 8004842:	00d2      	lsls	r2, r2, #3
 8004844:	4920      	ldr	r1, [pc, #128]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800484a:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e00f      	b.n	800488a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d106      	bne.n	800487e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800487c:	e005      	b.n	800488a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fc fc85 	bl	80011a4 <HAL_GetTick>
 800489a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800489c:	e008      	b.n	80048b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800489e:	f7fc fc81 	bl	80011a4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e006      	b.n	80048be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <RCCEx_PLL3_Config+0x15c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	ffff0007 	.word	0xffff0007

080048d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e049      	b.n	8004976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fa16 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 f9b4 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d001      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e021      	b.n	80049dc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <HAL_TIM_Base_Start_IT+0x68>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d00b      	beq.n	80049da <HAL_TIM_Base_Start_IT+0x5a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d007      	beq.n	80049da <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	00010007 	.word	0x00010007

080049ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0202 	mvn.w	r2, #2
 8004a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f905 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8f7 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f908 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0204 	mvn.w	r2, #4
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8db 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8cd 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8de 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0208 	mvn.w	r2, #8
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8b1 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8a3 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8b4 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0210 	mvn.w	r2, #16
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f887 	bl	8004c3e <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f879 	bl	8004c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f88a 	bl	8004c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0201 	mvn.w	r2, #1
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb ffc6 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d10e      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d107      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f914 	bl	8004dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d10e      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f907 	bl	8004dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f838 	bl	8004c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d10e      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d107      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0220 	mvn.w	r2, #32
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8c7 	bl	8004db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3c      	ldr	r2, [pc, #240]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01f      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d01b      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d017      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00f      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <TIM_Base_SetConfig+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0x9a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <TIM_Base_SetConfig+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a10      	ldr	r2, [pc, #64]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00f      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <TIM_Base_SetConfig+0x128>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d007      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <TIM_Base_SetConfig+0x130>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800

08004db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e042      	b.n	8004e84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fb ffb1 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	; 0x24
 8004e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f82c 	bl	8004e8c <UART_SetConfig>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e022      	b.n	8004e84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fdd0 	bl	80059ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fe57 	bl	8005b30 <UART_CheckIdleState>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e90:	b08e      	sub	sp, #56	; 0x38
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4bc1      	ldr	r3, [pc, #772]	; (80051cc <UART_SetConfig+0x340>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4ab7      	ldr	r2, [pc, #732]	; (80051d0 <UART_SetConfig+0x344>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efe:	4313      	orrs	r3, r2
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4bb2      	ldr	r3, [pc, #712]	; (80051d4 <UART_SetConfig+0x348>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f023 010f 	bic.w	r1, r3, #15
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4aa9      	ldr	r2, [pc, #676]	; (80051d8 <UART_SetConfig+0x34c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d177      	bne.n	8005026 <UART_SetConfig+0x19a>
 8004f36:	4ba9      	ldr	r3, [pc, #676]	; (80051dc <UART_SetConfig+0x350>)
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3e:	2b28      	cmp	r3, #40	; 0x28
 8004f40:	d86c      	bhi.n	800501c <UART_SetConfig+0x190>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xbc>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	0800501d 	.word	0x0800501d
 8004f50:	0800501d 	.word	0x0800501d
 8004f54:	0800501d 	.word	0x0800501d
 8004f58:	0800501d 	.word	0x0800501d
 8004f5c:	0800501d 	.word	0x0800501d
 8004f60:	0800501d 	.word	0x0800501d
 8004f64:	0800501d 	.word	0x0800501d
 8004f68:	08004ff5 	.word	0x08004ff5
 8004f6c:	0800501d 	.word	0x0800501d
 8004f70:	0800501d 	.word	0x0800501d
 8004f74:	0800501d 	.word	0x0800501d
 8004f78:	0800501d 	.word	0x0800501d
 8004f7c:	0800501d 	.word	0x0800501d
 8004f80:	0800501d 	.word	0x0800501d
 8004f84:	0800501d 	.word	0x0800501d
 8004f88:	08004ffd 	.word	0x08004ffd
 8004f8c:	0800501d 	.word	0x0800501d
 8004f90:	0800501d 	.word	0x0800501d
 8004f94:	0800501d 	.word	0x0800501d
 8004f98:	0800501d 	.word	0x0800501d
 8004f9c:	0800501d 	.word	0x0800501d
 8004fa0:	0800501d 	.word	0x0800501d
 8004fa4:	0800501d 	.word	0x0800501d
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	0800501d 	.word	0x0800501d
 8004fb0:	0800501d 	.word	0x0800501d
 8004fb4:	0800501d 	.word	0x0800501d
 8004fb8:	0800501d 	.word	0x0800501d
 8004fbc:	0800501d 	.word	0x0800501d
 8004fc0:	0800501d 	.word	0x0800501d
 8004fc4:	0800501d 	.word	0x0800501d
 8004fc8:	0800500d 	.word	0x0800500d
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800501d 	.word	0x0800501d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff2:	e233      	b.n	800545c <UART_SetConfig+0x5d0>
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffa:	e22f      	b.n	800545c <UART_SetConfig+0x5d0>
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005002:	e22b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500a:	e227      	b.n	800545c <UART_SetConfig+0x5d0>
 800500c:	2320      	movs	r3, #32
 800500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005012:	e223      	b.n	800545c <UART_SetConfig+0x5d0>
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501a:	e21f      	b.n	800545c <UART_SetConfig+0x5d0>
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005022:	bf00      	nop
 8005024:	e21a      	b.n	800545c <UART_SetConfig+0x5d0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6d      	ldr	r2, [pc, #436]	; (80051e0 <UART_SetConfig+0x354>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d132      	bne.n	8005096 <UART_SetConfig+0x20a>
 8005030:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <UART_SetConfig+0x350>)
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	2b05      	cmp	r3, #5
 800503a:	d827      	bhi.n	800508c <UART_SetConfig+0x200>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x1b8>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	0800505d 	.word	0x0800505d
 8005048:	08005065 	.word	0x08005065
 800504c:	0800506d 	.word	0x0800506d
 8005050:	08005075 	.word	0x08005075
 8005054:	0800507d 	.word	0x0800507d
 8005058:	08005085 	.word	0x08005085
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005062:	e1fb      	b.n	800545c <UART_SetConfig+0x5d0>
 8005064:	2304      	movs	r3, #4
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506a:	e1f7      	b.n	800545c <UART_SetConfig+0x5d0>
 800506c:	2308      	movs	r3, #8
 800506e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005072:	e1f3      	b.n	800545c <UART_SetConfig+0x5d0>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507a:	e1ef      	b.n	800545c <UART_SetConfig+0x5d0>
 800507c:	2320      	movs	r3, #32
 800507e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005082:	e1eb      	b.n	800545c <UART_SetConfig+0x5d0>
 8005084:	2340      	movs	r3, #64	; 0x40
 8005086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508a:	e1e7      	b.n	800545c <UART_SetConfig+0x5d0>
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005092:	bf00      	nop
 8005094:	e1e2      	b.n	800545c <UART_SetConfig+0x5d0>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a52      	ldr	r2, [pc, #328]	; (80051e4 <UART_SetConfig+0x358>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d132      	bne.n	8005106 <UART_SetConfig+0x27a>
 80050a0:	4b4e      	ldr	r3, [pc, #312]	; (80051dc <UART_SetConfig+0x350>)
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d827      	bhi.n	80050fc <UART_SetConfig+0x270>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x228>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050cd 	.word	0x080050cd
 80050b8:	080050d5 	.word	0x080050d5
 80050bc:	080050dd 	.word	0x080050dd
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e1c3      	b.n	800545c <UART_SetConfig+0x5d0>
 80050d4:	2304      	movs	r3, #4
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e1bf      	b.n	800545c <UART_SetConfig+0x5d0>
 80050dc:	2308      	movs	r3, #8
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	e1bb      	b.n	800545c <UART_SetConfig+0x5d0>
 80050e4:	2310      	movs	r3, #16
 80050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ea:	e1b7      	b.n	800545c <UART_SetConfig+0x5d0>
 80050ec:	2320      	movs	r3, #32
 80050ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f2:	e1b3      	b.n	800545c <UART_SetConfig+0x5d0>
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fa:	e1af      	b.n	800545c <UART_SetConfig+0x5d0>
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005102:	bf00      	nop
 8005104:	e1aa      	b.n	800545c <UART_SetConfig+0x5d0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <UART_SetConfig+0x35c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d132      	bne.n	8005176 <UART_SetConfig+0x2ea>
 8005110:	4b32      	ldr	r3, [pc, #200]	; (80051dc <UART_SetConfig+0x350>)
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	2b05      	cmp	r3, #5
 800511a:	d827      	bhi.n	800516c <UART_SetConfig+0x2e0>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x298>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005142:	e18b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	e187      	b.n	800545c <UART_SetConfig+0x5d0>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005152:	e183      	b.n	800545c <UART_SetConfig+0x5d0>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515a:	e17f      	b.n	800545c <UART_SetConfig+0x5d0>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005162:	e17b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516a:	e177      	b.n	800545c <UART_SetConfig+0x5d0>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005172:	bf00      	nop
 8005174:	e172      	b.n	800545c <UART_SetConfig+0x5d0>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <UART_SetConfig+0x360>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d144      	bne.n	800520a <UART_SetConfig+0x37e>
 8005180:	4b16      	ldr	r3, [pc, #88]	; (80051dc <UART_SetConfig+0x350>)
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	2b05      	cmp	r3, #5
 800518a:	d839      	bhi.n	8005200 <UART_SetConfig+0x374>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x308>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051ad 	.word	0x080051ad
 8005198:	080051b5 	.word	0x080051b5
 800519c:	080051bd 	.word	0x080051bd
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051f1 	.word	0x080051f1
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b2:	e153      	b.n	800545c <UART_SetConfig+0x5d0>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ba:	e14f      	b.n	800545c <UART_SetConfig+0x5d0>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	e14b      	b.n	800545c <UART_SetConfig+0x5d0>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ca:	e147      	b.n	800545c <UART_SetConfig+0x5d0>
 80051cc:	cfff69f3 	.word	0xcfff69f3
 80051d0:	58000c00 	.word	0x58000c00
 80051d4:	11fff4ff 	.word	0x11fff4ff
 80051d8:	40011000 	.word	0x40011000
 80051dc:	58024400 	.word	0x58024400
 80051e0:	40004400 	.word	0x40004400
 80051e4:	40004800 	.word	0x40004800
 80051e8:	40004c00 	.word	0x40004c00
 80051ec:	40005000 	.word	0x40005000
 80051f0:	2320      	movs	r3, #32
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e131      	b.n	800545c <UART_SetConfig+0x5d0>
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e12d      	b.n	800545c <UART_SetConfig+0x5d0>
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005206:	bf00      	nop
 8005208:	e128      	b.n	800545c <UART_SetConfig+0x5d0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4ab6      	ldr	r2, [pc, #728]	; (80054e8 <UART_SetConfig+0x65c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d178      	bne.n	8005306 <UART_SetConfig+0x47a>
 8005214:	4bb5      	ldr	r3, [pc, #724]	; (80054ec <UART_SetConfig+0x660>)
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800521c:	2b28      	cmp	r3, #40	; 0x28
 800521e:	d86d      	bhi.n	80052fc <UART_SetConfig+0x470>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0x39c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	080052cd 	.word	0x080052cd
 800522c:	080052fd 	.word	0x080052fd
 8005230:	080052fd 	.word	0x080052fd
 8005234:	080052fd 	.word	0x080052fd
 8005238:	080052fd 	.word	0x080052fd
 800523c:	080052fd 	.word	0x080052fd
 8005240:	080052fd 	.word	0x080052fd
 8005244:	080052fd 	.word	0x080052fd
 8005248:	080052d5 	.word	0x080052d5
 800524c:	080052fd 	.word	0x080052fd
 8005250:	080052fd 	.word	0x080052fd
 8005254:	080052fd 	.word	0x080052fd
 8005258:	080052fd 	.word	0x080052fd
 800525c:	080052fd 	.word	0x080052fd
 8005260:	080052fd 	.word	0x080052fd
 8005264:	080052fd 	.word	0x080052fd
 8005268:	080052dd 	.word	0x080052dd
 800526c:	080052fd 	.word	0x080052fd
 8005270:	080052fd 	.word	0x080052fd
 8005274:	080052fd 	.word	0x080052fd
 8005278:	080052fd 	.word	0x080052fd
 800527c:	080052fd 	.word	0x080052fd
 8005280:	080052fd 	.word	0x080052fd
 8005284:	080052fd 	.word	0x080052fd
 8005288:	080052e5 	.word	0x080052e5
 800528c:	080052fd 	.word	0x080052fd
 8005290:	080052fd 	.word	0x080052fd
 8005294:	080052fd 	.word	0x080052fd
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080052fd 	.word	0x080052fd
 80052a0:	080052fd 	.word	0x080052fd
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	080052ed 	.word	0x080052ed
 80052ac:	080052fd 	.word	0x080052fd
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	080052fd 	.word	0x080052fd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	080052fd 	.word	0x080052fd
 80052c4:	080052fd 	.word	0x080052fd
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e0c3      	b.n	800545c <UART_SetConfig+0x5d0>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e0bf      	b.n	800545c <UART_SetConfig+0x5d0>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	e0bb      	b.n	800545c <UART_SetConfig+0x5d0>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ea:	e0b7      	b.n	800545c <UART_SetConfig+0x5d0>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	e0b3      	b.n	800545c <UART_SetConfig+0x5d0>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e0af      	b.n	800545c <UART_SetConfig+0x5d0>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005302:	bf00      	nop
 8005304:	e0aa      	b.n	800545c <UART_SetConfig+0x5d0>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a79      	ldr	r2, [pc, #484]	; (80054f0 <UART_SetConfig+0x664>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d132      	bne.n	8005376 <UART_SetConfig+0x4ea>
 8005310:	4b76      	ldr	r3, [pc, #472]	; (80054ec <UART_SetConfig+0x660>)
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	2b05      	cmp	r3, #5
 800531a:	d827      	bhi.n	800536c <UART_SetConfig+0x4e0>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x498>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e08b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e087      	b.n	800545c <UART_SetConfig+0x5d0>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	e083      	b.n	800545c <UART_SetConfig+0x5d0>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535a:	e07f      	b.n	800545c <UART_SetConfig+0x5d0>
 800535c:	2320      	movs	r3, #32
 800535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005362:	e07b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536a:	e077      	b.n	800545c <UART_SetConfig+0x5d0>
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	bf00      	nop
 8005374:	e072      	b.n	800545c <UART_SetConfig+0x5d0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <UART_SetConfig+0x668>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d132      	bne.n	80053e6 <UART_SetConfig+0x55a>
 8005380:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <UART_SetConfig+0x660>)
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	2b05      	cmp	r3, #5
 800538a:	d827      	bhi.n	80053dc <UART_SetConfig+0x550>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x508>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b5 	.word	0x080053b5
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e053      	b.n	800545c <UART_SetConfig+0x5d0>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e04f      	b.n	800545c <UART_SetConfig+0x5d0>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	e04b      	b.n	800545c <UART_SetConfig+0x5d0>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ca:	e047      	b.n	800545c <UART_SetConfig+0x5d0>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	e043      	b.n	800545c <UART_SetConfig+0x5d0>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053da:	e03f      	b.n	800545c <UART_SetConfig+0x5d0>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e2:	bf00      	nop
 80053e4:	e03a      	b.n	800545c <UART_SetConfig+0x5d0>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a43      	ldr	r2, [pc, #268]	; (80054f8 <UART_SetConfig+0x66c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d132      	bne.n	8005456 <UART_SetConfig+0x5ca>
 80053f0:	4b3e      	ldr	r3, [pc, #248]	; (80054ec <UART_SetConfig+0x660>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d827      	bhi.n	800544c <UART_SetConfig+0x5c0>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x578>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005425 	.word	0x08005425
 800540c:	0800542d 	.word	0x0800542d
 8005410:	08005435 	.word	0x08005435
 8005414:	0800543d 	.word	0x0800543d
 8005418:	08005445 	.word	0x08005445
 800541c:	2302      	movs	r3, #2
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e01b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005424:	2304      	movs	r3, #4
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e017      	b.n	800545c <UART_SetConfig+0x5d0>
 800542c:	2308      	movs	r3, #8
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e013      	b.n	800545c <UART_SetConfig+0x5d0>
 8005434:	2310      	movs	r3, #16
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e00f      	b.n	800545c <UART_SetConfig+0x5d0>
 800543c:	2320      	movs	r3, #32
 800543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005442:	e00b      	b.n	800545c <UART_SetConfig+0x5d0>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544a:	e007      	b.n	800545c <UART_SetConfig+0x5d0>
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005452:	bf00      	nop
 8005454:	e002      	b.n	800545c <UART_SetConfig+0x5d0>
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a25      	ldr	r2, [pc, #148]	; (80054f8 <UART_SetConfig+0x66c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f040 80b8 	bne.w	80055d8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800546c:	2b08      	cmp	r3, #8
 800546e:	d019      	beq.n	80054a4 <UART_SetConfig+0x618>
 8005470:	2b08      	cmp	r3, #8
 8005472:	dc04      	bgt.n	800547e <UART_SetConfig+0x5f2>
 8005474:	2b02      	cmp	r3, #2
 8005476:	d009      	beq.n	800548c <UART_SetConfig+0x600>
 8005478:	2b04      	cmp	r3, #4
 800547a:	d00b      	beq.n	8005494 <UART_SetConfig+0x608>
 800547c:	e042      	b.n	8005504 <UART_SetConfig+0x678>
 800547e:	2b20      	cmp	r3, #32
 8005480:	d02b      	beq.n	80054da <UART_SetConfig+0x64e>
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d02c      	beq.n	80054e0 <UART_SetConfig+0x654>
 8005486:	2b10      	cmp	r3, #16
 8005488:	d014      	beq.n	80054b4 <UART_SetConfig+0x628>
 800548a:	e03b      	b.n	8005504 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800548c:	f7fe fe0e 	bl	80040ac <HAL_RCCEx_GetD3PCLK1Freq>
 8005490:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005492:	e03d      	b.n	8005510 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fe1d 	bl	80040d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054a2:	e035      	b.n	8005510 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe ff61 	bl	8004370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054b2:	e02d      	b.n	8005510 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <UART_SetConfig+0x660>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <UART_SetConfig+0x660>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <UART_SetConfig+0x670>)
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054d2:	e01d      	b.n	8005510 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <UART_SetConfig+0x670>)
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d8:	e01a      	b.n	8005510 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <UART_SetConfig+0x674>)
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054de:	e017      	b.n	8005510 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e6:	e013      	b.n	8005510 <UART_SetConfig+0x684>
 80054e8:	40011400 	.word	0x40011400
 80054ec:	58024400 	.word	0x58024400
 80054f0:	40007800 	.word	0x40007800
 80054f4:	40007c00 	.word	0x40007c00
 80054f8:	58000c00 	.word	0x58000c00
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800550e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 824d 	beq.w	80059b2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	4aad      	ldr	r2, [pc, #692]	; (80057d4 <UART_SetConfig+0x948>)
 800551e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005522:	461a      	mov	r2, r3
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	fbb3 f3f2 	udiv	r3, r3, r2
 800552a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	429a      	cmp	r2, r3
 800553a:	d305      	bcc.n	8005548 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800554e:	e230      	b.n	80059b2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	4618      	mov	r0, r3
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4a9d      	ldr	r2, [pc, #628]	; (80057d4 <UART_SetConfig+0x948>)
 800555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f04f 0400 	mov.w	r4, #0
 8005568:	461a      	mov	r2, r3
 800556a:	4623      	mov	r3, r4
 800556c:	f7fa feb4 	bl	80002d8 <__aeabi_uldivmod>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4619      	mov	r1, r3
 8005576:	4622      	mov	r2, r4
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	0214      	lsls	r4, r2, #8
 8005582:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005586:	020b      	lsls	r3, r1, #8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6852      	ldr	r2, [r2, #4]
 800558c:	0852      	lsrs	r2, r2, #1
 800558e:	4611      	mov	r1, r2
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	eb13 0b01 	adds.w	fp, r3, r1
 8005598:	eb44 0c02 	adc.w	ip, r4, r2
 800559c:	4658      	mov	r0, fp
 800559e:	4661      	mov	r1, ip
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	461a      	mov	r2, r3
 80055aa:	4623      	mov	r3, r4
 80055ac:	f7fa fe94 	bl	80002d8 <__aeabi_uldivmod>
 80055b0:	4603      	mov	r3, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055bc:	d308      	bcc.n	80055d0 <UART_SetConfig+0x744>
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c4:	d204      	bcs.n	80055d0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	e1f0      	b.n	80059b2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055d6:	e1ec      	b.n	80059b2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	f040 8100 	bne.w	80057e4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80055e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	f200 80b7 	bhi.w	800575c <UART_SetConfig+0x8d0>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x768>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	080056f9 	.word	0x080056f9
 80055f8:	08005701 	.word	0x08005701
 80055fc:	0800575d 	.word	0x0800575d
 8005600:	0800575d 	.word	0x0800575d
 8005604:	08005709 	.word	0x08005709
 8005608:	0800575d 	.word	0x0800575d
 800560c:	0800575d 	.word	0x0800575d
 8005610:	0800575d 	.word	0x0800575d
 8005614:	08005719 	.word	0x08005719
 8005618:	0800575d 	.word	0x0800575d
 800561c:	0800575d 	.word	0x0800575d
 8005620:	0800575d 	.word	0x0800575d
 8005624:	0800575d 	.word	0x0800575d
 8005628:	0800575d 	.word	0x0800575d
 800562c:	0800575d 	.word	0x0800575d
 8005630:	0800575d 	.word	0x0800575d
 8005634:	08005729 	.word	0x08005729
 8005638:	0800575d 	.word	0x0800575d
 800563c:	0800575d 	.word	0x0800575d
 8005640:	0800575d 	.word	0x0800575d
 8005644:	0800575d 	.word	0x0800575d
 8005648:	0800575d 	.word	0x0800575d
 800564c:	0800575d 	.word	0x0800575d
 8005650:	0800575d 	.word	0x0800575d
 8005654:	0800575d 	.word	0x0800575d
 8005658:	0800575d 	.word	0x0800575d
 800565c:	0800575d 	.word	0x0800575d
 8005660:	0800575d 	.word	0x0800575d
 8005664:	0800575d 	.word	0x0800575d
 8005668:	0800575d 	.word	0x0800575d
 800566c:	0800575d 	.word	0x0800575d
 8005670:	0800575d 	.word	0x0800575d
 8005674:	0800574f 	.word	0x0800574f
 8005678:	0800575d 	.word	0x0800575d
 800567c:	0800575d 	.word	0x0800575d
 8005680:	0800575d 	.word	0x0800575d
 8005684:	0800575d 	.word	0x0800575d
 8005688:	0800575d 	.word	0x0800575d
 800568c:	0800575d 	.word	0x0800575d
 8005690:	0800575d 	.word	0x0800575d
 8005694:	0800575d 	.word	0x0800575d
 8005698:	0800575d 	.word	0x0800575d
 800569c:	0800575d 	.word	0x0800575d
 80056a0:	0800575d 	.word	0x0800575d
 80056a4:	0800575d 	.word	0x0800575d
 80056a8:	0800575d 	.word	0x0800575d
 80056ac:	0800575d 	.word	0x0800575d
 80056b0:	0800575d 	.word	0x0800575d
 80056b4:	0800575d 	.word	0x0800575d
 80056b8:	0800575d 	.word	0x0800575d
 80056bc:	0800575d 	.word	0x0800575d
 80056c0:	0800575d 	.word	0x0800575d
 80056c4:	0800575d 	.word	0x0800575d
 80056c8:	0800575d 	.word	0x0800575d
 80056cc:	0800575d 	.word	0x0800575d
 80056d0:	0800575d 	.word	0x0800575d
 80056d4:	0800575d 	.word	0x0800575d
 80056d8:	0800575d 	.word	0x0800575d
 80056dc:	0800575d 	.word	0x0800575d
 80056e0:	0800575d 	.word	0x0800575d
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	0800575d 	.word	0x0800575d
 80056ec:	0800575d 	.word	0x0800575d
 80056f0:	0800575d 	.word	0x0800575d
 80056f4:	08005755 	.word	0x08005755
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7fd fdbe 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80056fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056fe:	e033      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fd fdd0 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8005704:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005706:	e02f      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fce3 	bl	80040d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005716:	e027      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005718:	f107 0308 	add.w	r3, r7, #8
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fe27 	bl	8004370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005726:	e01f      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005728:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <UART_SetConfig+0x94c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005734:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <UART_SetConfig+0x94c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	08db      	lsrs	r3, r3, #3
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	4a27      	ldr	r2, [pc, #156]	; (80057dc <UART_SetConfig+0x950>)
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005748:	4b24      	ldr	r3, [pc, #144]	; (80057dc <UART_SetConfig+0x950>)
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <UART_SetConfig+0x954>)
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005752:	e009      	b.n	8005768 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800575a:	e005      	b.n	8005768 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8121 	beq.w	80059b2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <UART_SetConfig+0x948>)
 8005776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800577a:	461a      	mov	r2, r3
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005782:	005a      	lsls	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2b0f      	cmp	r3, #15
 800579c:	d916      	bls.n	80057cc <UART_SetConfig+0x940>
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d212      	bcs.n	80057cc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f023 030f 	bic.w	r3, r3, #15
 80057ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057be:	4313      	orrs	r3, r2
 80057c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057c8:	60da      	str	r2, [r3, #12]
 80057ca:	e0f2      	b.n	80059b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057d2:	e0ee      	b.n	80059b2 <UART_SetConfig+0xb26>
 80057d4:	080064e0 	.word	0x080064e0
 80057d8:	58024400 	.word	0x58024400
 80057dc:	03d09000 	.word	0x03d09000
 80057e0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	f200 80b7 	bhi.w	800595c <UART_SetConfig+0xad0>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x968>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	080058f9 	.word	0x080058f9
 80057f8:	08005901 	.word	0x08005901
 80057fc:	0800595d 	.word	0x0800595d
 8005800:	0800595d 	.word	0x0800595d
 8005804:	08005909 	.word	0x08005909
 8005808:	0800595d 	.word	0x0800595d
 800580c:	0800595d 	.word	0x0800595d
 8005810:	0800595d 	.word	0x0800595d
 8005814:	08005919 	.word	0x08005919
 8005818:	0800595d 	.word	0x0800595d
 800581c:	0800595d 	.word	0x0800595d
 8005820:	0800595d 	.word	0x0800595d
 8005824:	0800595d 	.word	0x0800595d
 8005828:	0800595d 	.word	0x0800595d
 800582c:	0800595d 	.word	0x0800595d
 8005830:	0800595d 	.word	0x0800595d
 8005834:	08005929 	.word	0x08005929
 8005838:	0800595d 	.word	0x0800595d
 800583c:	0800595d 	.word	0x0800595d
 8005840:	0800595d 	.word	0x0800595d
 8005844:	0800595d 	.word	0x0800595d
 8005848:	0800595d 	.word	0x0800595d
 800584c:	0800595d 	.word	0x0800595d
 8005850:	0800595d 	.word	0x0800595d
 8005854:	0800595d 	.word	0x0800595d
 8005858:	0800595d 	.word	0x0800595d
 800585c:	0800595d 	.word	0x0800595d
 8005860:	0800595d 	.word	0x0800595d
 8005864:	0800595d 	.word	0x0800595d
 8005868:	0800595d 	.word	0x0800595d
 800586c:	0800595d 	.word	0x0800595d
 8005870:	0800595d 	.word	0x0800595d
 8005874:	0800594f 	.word	0x0800594f
 8005878:	0800595d 	.word	0x0800595d
 800587c:	0800595d 	.word	0x0800595d
 8005880:	0800595d 	.word	0x0800595d
 8005884:	0800595d 	.word	0x0800595d
 8005888:	0800595d 	.word	0x0800595d
 800588c:	0800595d 	.word	0x0800595d
 8005890:	0800595d 	.word	0x0800595d
 8005894:	0800595d 	.word	0x0800595d
 8005898:	0800595d 	.word	0x0800595d
 800589c:	0800595d 	.word	0x0800595d
 80058a0:	0800595d 	.word	0x0800595d
 80058a4:	0800595d 	.word	0x0800595d
 80058a8:	0800595d 	.word	0x0800595d
 80058ac:	0800595d 	.word	0x0800595d
 80058b0:	0800595d 	.word	0x0800595d
 80058b4:	0800595d 	.word	0x0800595d
 80058b8:	0800595d 	.word	0x0800595d
 80058bc:	0800595d 	.word	0x0800595d
 80058c0:	0800595d 	.word	0x0800595d
 80058c4:	0800595d 	.word	0x0800595d
 80058c8:	0800595d 	.word	0x0800595d
 80058cc:	0800595d 	.word	0x0800595d
 80058d0:	0800595d 	.word	0x0800595d
 80058d4:	0800595d 	.word	0x0800595d
 80058d8:	0800595d 	.word	0x0800595d
 80058dc:	0800595d 	.word	0x0800595d
 80058e0:	0800595d 	.word	0x0800595d
 80058e4:	0800595d 	.word	0x0800595d
 80058e8:	0800595d 	.word	0x0800595d
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	0800595d 	.word	0x0800595d
 80058f4:	08005955 	.word	0x08005955
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7fd fcbe 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80058fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058fe:	e033      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005900:	f7fd fcd0 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8005904:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005906:	e02f      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fbe3 	bl	80040d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005916:	e027      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fd27 	bl	8004370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005926:	e01f      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005928:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <UART_SetConfig+0xb50>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005934:	4b29      	ldr	r3, [pc, #164]	; (80059dc <UART_SetConfig+0xb50>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <UART_SetConfig+0xb54>)
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <UART_SetConfig+0xb54>)
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800594c:	e00c      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800594e:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <UART_SetConfig+0xb58>)
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005952:	e009      	b.n	8005968 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800595a:	e005      	b.n	8005968 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005966:	bf00      	nop
    }

    if (pclk != 0U)
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d021      	beq.n	80059b2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <UART_SetConfig+0xb5c>)
 8005974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005978:	461a      	mov	r2, r3
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	b29b      	uxth	r3, r3
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b0f      	cmp	r3, #15
 8005998:	d908      	bls.n	80059ac <UART_SetConfig+0xb20>
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a0:	d204      	bcs.n	80059ac <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e002      	b.n	80059b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80059ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3738      	adds	r7, #56	; 0x38
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80059dc:	58024400 	.word	0x58024400
 80059e0:	03d09000 	.word	0x03d09000
 80059e4:	003d0900 	.word	0x003d0900
 80059e8:	080064e0 	.word	0x080064e0

080059ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01a      	beq.n	8005b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d10a      	bne.n	8005b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b40:	f7fb fb30 	bl	80011a4 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d10e      	bne.n	8005b72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f82c 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e022      	b.n	8005bb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d10e      	bne.n	8005b9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f816 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e00c      	b.n	8005bb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	e062      	b.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d05e      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7fb fae3 	bl	80011a4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d11d      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bfe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e045      	b.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02e      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c48:	d126      	bne.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e00f      	b.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d08d      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e027      	b.n	8005d26 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2224      	movs	r2, #36	; 0x24
 8005ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e02d      	b.n	8005da6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	; 0x24
 8005d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f850 	bl	8005e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e02d      	b.n	8005e22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2224      	movs	r2, #36	; 0x24
 8005dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f812 	bl	8005e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e34:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e3e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e42:	4a2d      	ldr	r2, [pc, #180]	; (8005ef8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e4c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e68:	e03d      	b.n	8005ee6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e6e:	2310      	movs	r3, #16
 8005e70:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	0e5b      	lsrs	r3, r3, #25
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	0f5b      	lsrs	r3, r3, #29
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e92:	7fbb      	ldrb	r3, [r7, #30]
 8005e94:	7f3a      	ldrb	r2, [r7, #28]
 8005e96:	f107 0120 	add.w	r1, r7, #32
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	7f3a      	ldrb	r2, [r7, #28]
 8005ea6:	f107 0120 	add.w	r1, r7, #32
 8005eaa:	440a      	add	r2, r1
 8005eac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
 8005ebe:	7f7a      	ldrb	r2, [r7, #29]
 8005ec0:	f107 0120 	add.w	r1, r7, #32
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	7f7a      	ldrb	r2, [r7, #29]
 8005ed0:	f107 0120 	add.w	r1, r7, #32
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ee6:	bf00      	nop
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	080064c0 	.word	0x080064c0
 8005ef8:	080064c8 	.word	0x080064c8

08005efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005efc:	b084      	sub	sp, #16
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	f107 001c 	add.w	r0, r7, #28
 8005f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d120      	bne.n	8005f56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <USB_CoreInit+0xc0>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d105      	bne.n	8005f4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fa4c 	bl	80063e8 <USB_CoreReset>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e01a      	b.n	8005f8c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa40 	bl	80063e8 <USB_CoreReset>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f7e:	e005      	b.n	8005f8c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10b      	bne.n	8005faa <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f043 0206 	orr.w	r2, r3, #6
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb6:	b004      	add	sp, #16
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	ffbdffbf 	.word	0xffbdffbf

08005fc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f023 0201 	bic.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	e00b      	b.n	8006026 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	e001      	b.n	8006026 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e003      	b.n	800602e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006026:	2032      	movs	r0, #50	; 0x32
 8006028:	f7fb f8c8 	bl	80011bc <HAL_Delay>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006038:	b084      	sub	sp, #16
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e009      	b.n	800606c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3340      	adds	r3, #64	; 0x40
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b0e      	cmp	r3, #14
 8006070:	d9f2      	bls.n	8006058 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11c      	bne.n	80060b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e005      	b.n	80060be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c4:	461a      	mov	r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	4619      	mov	r1, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	461a      	mov	r2, r3
 80060da:	680b      	ldr	r3, [r1, #0]
 80060dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10c      	bne.n	80060fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f949 	bl	8006384 <USB_SetDevSpeed>
 80060f2:	e008      	b.n	8006106 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f944 	bl	8006384 <USB_SetDevSpeed>
 80060fc:	e003      	b.n	8006106 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060fe:	2103      	movs	r1, #3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f93f 	bl	8006384 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006106:	2110      	movs	r1, #16
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8f3 	bl	80062f4 <USB_FlushTxFifo>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f911 	bl	8006340 <USB_FlushRxFifo>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	461a      	mov	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	461a      	mov	r2, r3
 8006148:	2300      	movs	r3, #0
 800614a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	e043      	b.n	80061da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d118      	bne.n	800619c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e013      	b.n	80061ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	461a      	mov	r2, r3
 8006194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e008      	b.n	80061ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ba:	461a      	mov	r2, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	461a      	mov	r2, r3
 80061ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	3301      	adds	r3, #1
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3b7      	bcc.n	8006152 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e043      	b.n	8006270 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fe:	d118      	bne.n	8006232 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e013      	b.n	8006244 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e008      	b.n	8006244 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	461a      	mov	r2, r3
 8006240:	2300      	movs	r3, #0
 8006242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	461a      	mov	r2, r3
 8006264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	3301      	adds	r3, #1
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	429a      	cmp	r2, r3
 8006276:	d3b7      	bcc.n	80061e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800628a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <USB_DevInit+0x2b4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f043 0208 	orr.w	r2, r3, #8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <USB_DevInit+0x2b8>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e8:	b004      	add	sp, #16
 80062ea:	4770      	bx	lr
 80062ec:	803c3800 	.word	0x803c3800
 80062f0:	40000004 	.word	0x40000004

080062f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	f043 0220 	orr.w	r2, r3, #32
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <USB_FlushTxFifo+0x48>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d0f0      	beq.n	800630e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	00030d40 	.word	0x00030d40

08006340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2210      	movs	r2, #16
 8006350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <USB_FlushRxFifo+0x40>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d0f0      	beq.n	8006352 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	00030d40 	.word	0x00030d40

08006384 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d0:	f043 0302 	orr.w	r3, r3, #2
 80063d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80063d6:	2003      	movs	r0, #3
 80063d8:	f7fa fef0 	bl	80011bc <HAL_Delay>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a13      	ldr	r2, [pc, #76]	; (800644c <USB_CoreReset+0x64>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e01b      	b.n	800643e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	daf2      	bge.n	80063f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f043 0201 	orr.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <USB_CoreReset+0x64>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d901      	bls.n	8006430 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e006      	b.n	800643e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d0f0      	beq.n	800641e <USB_CoreReset+0x36>

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	00030d40 	.word	0x00030d40

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4e0d      	ldr	r6, [pc, #52]	; (8006488 <__libc_init_array+0x38>)
 8006454:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006456:	1ba4      	subs	r4, r4, r6
 8006458:	10a4      	asrs	r4, r4, #2
 800645a:	2500      	movs	r5, #0
 800645c:	42a5      	cmp	r5, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	4e0b      	ldr	r6, [pc, #44]	; (8006490 <__libc_init_array+0x40>)
 8006462:	4c0c      	ldr	r4, [pc, #48]	; (8006494 <__libc_init_array+0x44>)
 8006464:	f000 f820 	bl	80064a8 <_init>
 8006468:	1ba4      	subs	r4, r4, r6
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	2500      	movs	r5, #0
 800646e:	42a5      	cmp	r5, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006478:	4798      	blx	r3
 800647a:	3501      	adds	r5, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006482:	4798      	blx	r3
 8006484:	3501      	adds	r5, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	08006500 	.word	0x08006500
 800648c:	08006500 	.word	0x08006500
 8006490:	08006500 	.word	0x08006500
 8006494:	08006504 	.word	0x08006504

08006498 <memset>:
 8006498:	4402      	add	r2, r0
 800649a:	4603      	mov	r3, r0
 800649c:	4293      	cmp	r3, r2
 800649e:	d100      	bne.n	80064a2 <memset+0xa>
 80064a0:	4770      	bx	lr
 80064a2:	f803 1b01 	strb.w	r1, [r3], #1
 80064a6:	e7f9      	b.n	800649c <memset+0x4>

080064a8 <_init>:
 80064a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064aa:	bf00      	nop
 80064ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ae:	bc08      	pop	{r3}
 80064b0:	469e      	mov	lr, r3
 80064b2:	4770      	bx	lr

080064b4 <_fini>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	bf00      	nop
 80064b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ba:	bc08      	pop	{r3}
 80064bc:	469e      	mov	lr, r3
 80064be:	4770      	bx	lr
